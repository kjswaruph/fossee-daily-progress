#!/bin/bash

testInput() {
    local user_exists confirm

    if [[ "$SITE_NAME" != "${SITE_NAME,,}" || "$SITE_NAME" =~ [[:space:]] ]]; then
        echo "Error: Site name must be lowercase only with no spaces."
        exit 1
    fi

    if [[ "$SITE_DB_NAME" != "${SITE_DB_NAME,,}" || "$SITE_DB_NAME" =~ [[:space:]] ]]; then
        echo "Error: DB name must be lowercase only with no spaces."
        exit 1
    fi

    if [[ ! -f "$SITE_DB_DUMP" ]]; then
        echo "Error: SQL dump file '$SITE_DB_DUMP' does not exist."
        exit 1
    fi

    if [[ "$SITE_DB_USERNAME" != "${SITE_DB_USERNAME,,}" || "$SITE_DB_USERNAME" =~ [[:space:]] ]]; then
        echo "Error: Database username must be lowercase only with no spaces."
        exit 1
    fi

    if ! sudo mysql -u root -p"$ROOTPASS" -e "SELECT 1;" 2> >(grep -v "Using a password on the command line" >&2); then
        echo "Error: Invalid MySQL root password or MySQL server not running."
        exit 1
    fi

    if [[ "$SITE_VERSION" == "10" ]]; then
        SITE_VERSION="Dockerfile"
    elif [[ "$SITE_VERSION" == "11" ]]; then
        SITE_VERSION="Dockerfile.11"
    else
        echo "Error: Invalid Drupal Version (Choose 10 or 11)."
        exit 1
    fi

    #TODO check for branch validity
    SITE_BRANCH="$tmp_site_branch"

    user_exists=$(sudo mysql -u root -p"$ROOTPASS" -sse "SELECT COUNT(*) FROM mysql.user WHERE user='$SITE_DB_USERNAME'" 2> >(grep -v "Using a password on the command line" >&2))

    if [[ "$user_exists" -ne 0 ]]; then
        echo "Alert: MySQL user '$SITE_DB_USERNAME' already exists."
        read -r -p "Do you wish to use this username? (y/n): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            echo "Going ahead with $SITE_DB_USERNAME..."
            read -s -p "Enter the password of the user: " SITE_DB_PASSWD
            echo

            return 0
        else
            exit 1
        fi
    fi
}

getInput() {

    if [[ DB_CONFIG -eq 1 ]]; then
        return 0;
    fi

    local tmp_rootpass tmp_site_db_username tmp_site_db_name tmp_site_db_dump tmp_site_name tmp_site_version tmp_site_branch
    local tag confirm

    while true; do
        read -s -p "Enter MySQL root password: " tmp_rootpass
        echo
        echo "!! Kindly use lowercase for naming and don't include white spaces !!"
        read -r -p "Enter name of the site: " tmp_site_name
        read -r -p "Enter name of site database: " tmp_site_db_name
        read -r -p "Add date tag to database name? [default: _$(date +%Y_%m_%d)]: " tag
        tag=${tag:-_$(date +%Y_%m_%d)}
        tmp_site_db_name="${tmp_site_db_name}${tag}"
        read -r -p "Enter database username you wish to use: " tmp_site_db_username
        read -r -p "Enter path to SQL dumpfile for site: " tmp_site_db_dump
        read -r -p "Choose Drupal version for site (10, 11): " tmp_site_version
        read -r -p "Enter branch name to clone: " tmp_site_branch
        echo

        echo "Summary of entered information:"
        echo "Site Name        : $tmp_site_name"
        echo "Database Name    : $tmp_site_db_name"
        echo "Database Username: $tmp_site_db_username"
        echo "SQL Dump File    : $tmp_site_db_dump"
        echo "Image Name       : ${tmp_site_name}_image"
        echo "Container Name   : ${tmp_site_name}_container"
        echo "Service Name     : ${tmp_site_name}_persist"
        echo "Drupal Version   : $tmp_site_version"
        echo

        read -r -p "Is this information correct? (y/n): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            ROOTPASS="$tmp_rootpass"
            SITE_NAME="$tmp_site_name"
            SITE_VERSION="$tmp_site_version"
            SITE_DB_USERNAME="$tmp_site_db_username"
            SITE_DB_DUMP="$tmp_site_db_dump"
            SITE_SERVICE="${tmp_site_name}_persist"
            SITE_IMAGE="${tmp_site_name}_image"
            SITE_CONTAINER="${tmp_site_name}_container"
            SITE_DB_NAME="${tmp_site_db_name}"
            SITE_DB_PASSWD=$(echo "$(tr -dc 'A-Z' </dev/urandom | head -c 1)$(tr -dc 'a-z' </dev/urandom | head -c 1)$(tr -dc '0-9' </dev/urandom | head -c 1)$(tr -dc '!@#$%^&*()_+=-[]{};:,.<>?' </dev/urandom | head -c 1)$(tr -dc 'A-Za-z0-9!@#$%^&*()_+=-[]{};:,.<>?' </dev/urandom | head -c 31)" | fold -w1 | shuf | tr -d '\n')

            echo "Confirmed. Continuing..."
            break
        else
            echo "Trying again..."
            echo
        fi
    done

    testInput &&
    echo "Config passed input validation"

    return 0
}

updateJSON() {

    if [[ DB_CONFIG -eq 1 ]]; then
        return 0;
    fi

    jq --arg site "$SITE_NAME" \
       --arg branch "$SITE_BRANCH" \
       --arg db "$SITE_DB_NAME" \
       --arg user "$SITE_DB_USERNAME" \
       --arg pass "$SITE_DB_PASSWD" \
       --arg service "$SITE_SERVICE" \
       --arg image "$SITE_IMAGE" \
       --arg container "$SITE_CONTAINER" \
       'map(
         if .SITE_NAME == $site then
           . + {
             "SITE_BRANCH": $branch,
             "SITE_DB_NAME": $db,
             "SITE_DB_USERNAME": $user,
             "SITE_DB_PASSWD": $pass,
             "SITE_IMAGE": $image,
             "SITE_CONTAINER": $container,
             "SITE_SERVICE": $service
           }
         else .
         end
       )' sites.json > tmp && mv tmp sites.json

    echo "Config saved to sites.json"
    
    return 0;
}

createUserAndDB() {

    if [[ DB_CONFIG -eq 1 ]]; then
        return 0;
    fi

    local db_exists
    db_exists=$(sudo mysql -u root -p"$ROOTPASS" -sse "SHOW DATABASES LIKE '$SITE_DB_NAME'" 2> >(grep -v "Using a password on the command line" >&2))

    if [[ "$db_exists" == "$SITE_DB_NAME" ]]; then
        echo "Database '$SITE_DB_NAME' already exists. Skipping creation."
    else
        echo "Creating database '$SITE_DB_NAME' and user '$SITE_DB_USERNAME'..."

        sudo mysql -u root -p"$ROOTPASS" 2> >(grep -v "Using a password on the command line" >&2) <<EOF
CREATE DATABASE \`$SITE_DB_NAME\`;
CREATE USER '$SITE_DB_USERNAME'@'localhost' IDENTIFIED BY '$SITE_DB_PASSWD';
GRANT ALL PRIVILEGES ON \`$SITE_DB_NAME\`.* TO '$SITE_DB_USERNAME'@'localhost';
FLUSH PRIVILEGES;
EOF
    fi

    return 0
}

importDump() {

    if [[ DB_CONFIG -eq 1 ]]; then
        return 0;
    fi

    echo "Importing ${SITE_DB_DUMP} to ${SITE_DB_NAME}"

     
    sudo mysql -u root -p"$ROOTPASS" "$SITE_DB_NAME" < <(sed -e '/^CREATE DATABASE/d' -e '/^USE /d' "$SITE_DB_DUMP")  2> >(grep -v "Using a password on the command line" >&2)
    return 0
}

cloneRepo() {
    
    mapfile -t lines < <(
        jq -r --arg site_name "$SITE_NAME" '
          .[] | select(.SITE_NAME == $site_name) |
          "\(.REPO)\n\(.SITE_BRANCH)"
        ' sites.json
    )

    if [ "${#lines[@]}" -ne 2 ]; then
        echo "Error: Could not extract all 2 fields for $SITE_NAME"
        return 1
    fi

    repo="${lines[0]}"
    branch="${lines[1]}"

    git clone --branch ${branch} ${repo}

}

createVolume() {
    local confirm
    local custom_name

    SITE_VOLUME="${SITE_NAME}_volume"

    if podman volume exists "$SITE_VOLUME"; then
        echo "Persistent volume '$SITE_VOLUME' already exists."
    else
        echo "Persistent volume for site '$SITE_NAME' does not exist."
    fi
    read -r -p "Do you want to create and use a new volume? [y/N]: " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        read -r -p "Enter custom volume name [default: $SITE_VOLUME]: " custom_name
        SITE_VOLUME="${custom_name:-$SITE_VOLUME}"
        podman volume create "$SITE_VOLUME"
        echo "Volume '$SITE_VOLUME' created."
    else
        echo "Using $SITE_VOLUME, new volume creation skipped."
    fi
}

createImage() {
    local port repo db_name db_user db_pass site_image confirm
    local lines

    echo "SITE_NAME: $SITE_NAME"

    mapfile -t lines < <(
        jq -r --arg site_name "$SITE_NAME" '
          .[] | select(.SITE_NAME == $site_name) |
          "\(.PORT)\n\(.REPO)\n\(.SITE_DB_NAME)\n\(.SITE_DB_USERNAME)\n\(.SITE_DB_PASSWD)\n\(.SITE_IMAGE)"
        ' sites.json
    )

    if [ "${#lines[@]}" -ne 6 ]; then
        echo "Error: Could not extract all 6 fields for $SITE_NAME"
        return 1
    fi

    port="${lines[0]}"
    repo="${lines[1]}"
    db_name="${lines[2]}"
    db_user="${lines[3]}"
    db_pass="${lines[4]}"
    site_image="${lines[5]}"

    repo=$(echo $repo | awk -F'/' '{print $NF}')

    SITE_IMAGE=$site_image

    echo "Building Podman image with:"
    echo "Site Image Name  : $SITE_IMAGE"
    echo "Database Name    : $db_name"
    echo "Database Username: $db_user"
    echo "Repository       : $repo"
    echo

    read -p "Proceed with image build? (y/N): " confirm
    case "$confirm" in
        [yY][eE][sS]|[yY]) ;;
        *) echo "Aborted by user."; return 1 ;;
    esac

    if podman build -t "$SITE_IMAGE" -f "$SITE_VERSION" . \
        --build-arg REPO_DIR="$repo" \
        --build-arg ENV_DB="$db_name" \
        --build-arg ENV_USR="$db_user" \
        --build-arg ENV_PSWD="$db_pass" \
        --build-arg ENV_HOST="10.0.2.2"; then
        return 0
    else
        echo "Error: Failed to build Podman image $SITE_IMAGE for site '$SITE_NAME'" >&2
        return 1
    fi
}

runContainer() {
    local port site_service site_image site_container

    mapfile -t lines < <(
        jq -r --arg site_name "$SITE_NAME" '
          .[] | select(.SITE_NAME == $site_name) |
          "\(.PORT)\n\(.SITE_IMAGE)\n\(.SITE_CONTAINER)\n\(.SITE_SERVICE)"
        ' sites.json
    )

    if [ "${#lines[@]}" -ne 4 ]; then
        echo "Error: Could not extract all 4 fields for $SITE_NAME to build container."
        return 1
    fi

    port="${lines[0]}"
    site_image="${lines[1]}"
    site_container="${lines[2]}"
    site_service="${lines[3]}"

    PORT=$port
    SITE_IMAGE=$site_image
    SITE_CONTAINER=$site_container
    SITE_SERVICE=$site_service

    mkdir -p ~/.config/containers/systemd

    echo "Writing container file to ~/.config/containers/systemd/${SITE_SERVICE}.container"
    cat > ~/.config/containers/systemd/${SITE_SERVICE}.container <<EOF
[Unit]
Description=${SITE_NAME} Persist Container
After=network-online.target
Wants=network-online.target

[Container]
Image=${SITE_IMAGE}:latest
Pull=never
AddCapability=NET_RAW
ContainerName=${SITE_CONTAINER}
PublishPort=${PORT}:80
Volume=${SITE_VOLUME}:/var/www/html/sites/default/files:Z
Network=slirp4netns:allow_host_loopback=true

[Service]
Restart=unless-stopped
TimeoutStartSec=1000

[Install]
WantedBy=default.target
EOF

    echo "Building Service to ~/.config/systemd/user/${SITE_SERVICE}.service"
    systemctl --user daemon-reload
    mkdir -p ~/.config/systemd/user
    cp /run/user/$(id -u)/systemd/generator/${site_service}.service ~/.config/systemd/user/
    echo "Starting service ${SITE_SERVICE}.service"
    systemctl --user daemon-reload
    systemctl --user enable ${site_service}.service
    systemctl --user start ${site_service}.service

    return 0
}

handleFailure() {
    local port repo db_name db_user db_pass site_image site_container site_service confirm
    local lines

    echo "Error occurred. Check input and try again."
    read -p "Would you like to undo the changes made by script? (y/N): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then


        mapfile -t lines < <(
            jq -r --arg site_name "$SITE_NAME" '
              .[] | select(.SITE_NAME == $site_name) |
              "\(.PORT)\n\(.REPO)\n\(.SITE_DB_NAME)\n\(.SITE_DB_USERNAME)\n\(.SITE_DB_PASSWD)\n\(.SITE_IMAGE)\n\(.SITE_CONTAINER)\n\(.SITE_SERVICE)"
            ' sites.json
        )

        if [ "${#lines[@]}" -ne 8 ]; then
            echo "Error: Could not extract all 8 fields for $SITE_NAME"
            return 1
        fi

        port="${lines[0]}"
        repo="${lines[1]}"
        db_name="${lines[2]}"
        db_user="${lines[3]}"
        db_pass="${lines[4]}"
        site_image="${lines[5]}"
        site_container="${lines[6]}"
        site_service="${lines[7]}"

        repo=$(echo "${repo}" | awk -F'/' '{print $NF}')

        systemctl --user disable ${site_service}
        systemctl --user stop ${site_service}

        rm /run/user/$(id -u)/systemd/generator/${site_service}.service
        rm ${HOME}/.config/containers/systemd/${site_service}.container
        rm ${HOME}/.config/systemd/user/${site_service}.service

        podman container stop $site_container
        podman container rm $site_container
        podman image rm $site_image

        rm -rf ${repo}

        sudo mysql -u root -p"$ROOTPASS" 2> >(grep -v "Using a password on the command line" >&2) <<EOF
DROP DATABASE \`$db_name\`;
DROP USER '$db_user'@'localhost';
FLUSH PRIVILEGES;
EOF

        jq --arg site "$SITE_NAME" \
           --arg db "" \
           --arg user "" \
           --arg pass "" \
           --arg service "" \
           --arg image "" \
           --arg container "" \
           'map(
             if .SITE_NAME == $site then
               . + {
                 "SITE_DB_NAME": $db,
                 "SITE_DB_USERNAME": $user,
                 "SITE_DB_PASSWD": $pass,
                 "SITE_IMAGE": $image,
                 "SITE_CONTAINER": $container,
                 "SITE_SERVICE": $service
               }
             else .
             end
           )' sites.json > tmp && mv tmp sites.json

        echo "Undo complete. Exiting."
        exit 1
    else
        echo "Continuing without undo."
    fi
}

PORT=""
REPO=""
SITE_BRANCH=""
SITE_NAME=""
SITE_VERSION=""
SITE_DB_NAME=""
SITE_DB_USERNAME=""
SITE_DB_PASSWD=""
SITE_VOLUME=""
SITE_IMAGE=""
SITE_CONTAINER=""
SITE_SERVICE=""
DB_CONFIG=""

main() {

    if [[ $1 == "-s" ]]; then
        DB_CONFIG=1
        shift
    fi

    SITE_NAME=$1

    {
        getInput &&
        updateJSON &&
        createUserAndDB &&
        importDump &&
        cloneRepo &&
        createVolume &&
        createImage && 
        runContainer &&
        echo "::: Operation complete :::"
    } || {
        echo "!!! Operation Failed !!!"
        handleFailure
    }
}

time main "$@"

